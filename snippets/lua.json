{
    "new variable": {
        "prefix": "var",
        "body": [ "local ${1:newvar} = ${2:}" ]
    },

    "new function": {
        "prefix": "func",
        "body": [ "function ${1:newfunc}() ${2:} end" ]
    },

    "new anonymous function": {
        "prefix": "anon func",
        "body": [ "function() ${1:} end" ]
    },

    "new if": {
        "prefix": "if",
        "body": [
            "if ${1:cond} then",
            "\t${2:}",
            "end"
        ]
    },

    "for each": {
        "prefix": "for each",
        "body": [
            "for key, value in pairs(${1:table}) do",
            "\t${2:}",
            "end"
        ]
    },

    "print": {
        "prefix": "print",
        "body": [ "print(\"${1:hello!}\")" ]
    },

    "nvim flatten table": {
        "prefix": "flatten table",
        "body": [
            "local table = vim.iter({",
                "\t${1:table1}",
                "\t${2:table2}",
            "}):flatten(1):totable()"
        ]
    },


    "nvim notify": {
        "prefix": "notify",
        "body": "vim.notify(\"${1:notif}\", vim.log.levels.${2:INFO})"
    },

    "get home dir": {
        "prefix": "get home dir",
        "body": "os.getenv(\"HOME\")"
    },

    "get nvim filetype": {
        "prefix": "get nvim filetype",
        "body": [ "vim.bo.filetype" ]
    },

    "get nvim current buffer": {
        "prefix": "get nvim curr buf",
        "body": [ "vim.api.nvim_get_current_buf()" ]
    },

    "get nvim buffertype": {
        "prefix": "get nvim buftype",
        "body": [ "vim.bo.buftype" ]
    },

    "get buffer filepath": {
        "prefix": "get buf filepath",
        "body": [ "vim.api.nvim_buf_get_name(0)" ]
    },

    "get nvim mode": {
        "prefix": "get nvim mode",
        "body": [ "vim.fn.mode()" ]
    },

    "get nvim cursor position": {
        "prefix": "get nvim cursor pos",
        "body": [ "vim.api.nvim_win_get_cursor(0)" ]
    },

    "set nvim cursor position": {
        "prefix": "set nvim cursor pos",
        "body": [ "vim.api.nvim_win_set_cursor(0, cpos)" ]
    },

    "get nvim region": {
        "prefix": "get nvim region",
        "body": [
            "vim.fn.getregion(${1:startpos}, ${2:endpos})[1]"
        ]
    },

    "get nvim char under cursor": {
        "prefix": "get nvim char under cursor",
        "body": [
            "vim.fn.getregion(vim.fn.getpos('.'), vim.fn.getpos('.'))[1]"
        ]
    },

    "get nvim visual selection text": {
        "prefix": "get nvim visual selection text",
        "body": [
            "vim.fn.getregion(vim.fn.getpos(\".\"), vim.fn.getpos(\"v\"))[1]"
        ]
    },

    "set nvim text at position": {
        "prefix": "set nvim text at position",
        "body": [
            "vim.api.nvim_buf_set_text(0,",
            "    startrow, startcol,",
            "    endrow,   endcol,",
            "    {\"text\"}",
            ")"
        ]
    },

    "get nvim cwd": {
        "prefix": "nvim cwd",
        "body": [ "vim.fn.getcwd()" ]
    },

    "set nvim keymap": {
        "prefix": "set nvim keymap",
        "body": [
            "vim.keymap.set(\"${1:n}\", \"${2:<key>}\", \"${3:}\")"
        ]
    },

    "vim cmd": {
        "prefix": "vim.cmd",
        "body": [ "vim.cmd(\"${1:}\")" ]
    },

    "new nvim user command": {
        "prefix": "new nvim user command",
        "body": [
            "vim.api.nvim_create_user_command(\"${1:NewUserCmd}\", function()",
                "\t${2:}",
                "end, {})"
        ],
        "description": ""
    },

    "new nvim autocommand": {
        "prefix": "new nvim autocommand",
        "body": [
            "vim.api.nvim_create_autocmd('${1:BufEnter}', {",
                "\tgroup = 'UserAutoCmds',",
                "\tpattern = '*',",
                "\tcallback = function()",
                "\t\t${0:}",
                "\tend,",
                "})"
        ]
    },

    "new nvim user autocmd group": {
        "prefix": "new nvim user autocmd group",
        "body": [
            "vim.api.nvim_create_augroup('NewUserAutoCmdGroup', { clear = true })"
        ]
    },


    "vim ui input": {
        "prefix": "vim ui input",
        "body": [
            "vim.ui.input({",
            "    prompt=\"${1:Input}:\" default=\"${2:default}\" completion=\"file\",",
            "},",
            "function(input)",
            "    vim.api.nvim_command(\"redraw\") -- Hide prompt",
            "    if input == nil then",
            "        vim.notify(\"Canceled\", vim.log.levels.INFO) return",
            "    end",
            "    if input == \"\" then",
            "        print(\"input empty!\") return",
            "    end",
            "",
            "    ${0:}",
            "end)"
        ]
    },

    "nvim keymap cmd": {
        "prefix": "keymap cmd",
        "body": [
            "\"<Cmd>${1:}<CR>\""
        ]
    }

}


