{
    "new variable": {
        "prefix": "var",
        "body": [ "local ${1:name} = ${2:value}" ]
    },

    "new function": {
        "prefix": "func",
        "body": [ "function ${1:name}() ${2:} end" ]
    },

    "new if": {
        "prefix": "if",
        "body": [ "if ${1:name} then ${2:} end" ]
    },

    "print": {
        "prefix": "print",
        "body": [ "print(\"${1:print}\")" ]
    },

    "vscode snippet": {
        "prefix": "vscode_snippet",
        "description": "Create a new VSCode snippet",
        "body": [
            "\"new snippet\": {",
            "\t\"prefix\": \"<your-prefix>\",",
            "\t\"description\": \"<your-description>\",",
            "\t\"body\": [",
            "\t\t\"<your-snippet-body>\"",
            "\t]",
            "}"
        ]
    },

    "nvim user command": {
        "prefix": "nvim user command",
        "body": [
            "vim.api.nvim_create_user_command(\"${1:NewUserCmd}\", function()",
                "\t${0}",
            "end, {})"
        ],
        "description": "Create a new user command in Neovim"
    },

    "nvim autocommand": {
        "prefix": "nvim autocommand",
        "description": "Create a new nvim auto command",
        "body": [
            "vim.api.nvim_create_autocmd('BufEnter', {",
            "\tgroup = 'UserAutoCmds',",
            "\tpattern = '*',",
            "\tcallback = function()",
                "\t\t--do stuff",
            "\tend,",
            "})"
        ]
    },

    "nvim_user_autocmd_group": {
        "prefix": "nvim_user_autocmd_group",
        "body": [
            "vim.api.nvim_create_augroup('NewUserAutoCmdGroup', { clear = true })"
        ]
    },

    "create nvim keymap": {
        "prefix": "create nvim keymap",
        "body": [
            "vim.keymap.set(${1:\"n\"}, ${2:\"<key>\"}, ${3:\" \"})"
        ]
    },

    "for each table": {
        "prefix": "for each table",
        "body": [
            "for _, item in pairs(table) do",
                "\t--stuff",
            "end"
        ]
    },

    "flatten table": {
        "prefix": "flatten table",
        "body": [
            "local table = vim.iter({",
                "\t${1:table1}",
                "\t${2:table2}",
            "}):flatten(1):totable()"
        ]
    },

    "get home dir": {
        "prefix": "get home dir",
        "body": "os.getenv(\"HOME\")"
    },

    "dashline10": {
        "prefix": "dashline10",
        "body": [
            "----------"
        ]
    },

    "get nvim filetype": {
        "prefix": "get_nvim_filetype",
        "body": [ "vim.bo.filetype" ]
    },

    "get nvim current buffer": {
        "prefix": "get_nvim_current_buffer",
        "body": [ "vim.api.nvim_get_current_buf()" ]
    },

    "get nvim_buffertype": {
        "prefix": "get_nvim_buffertype",
        "body": [ "vim.bo.buftype" ]
    },

    "get buffer filepath": {
        "prefix": "get buffer filepath",
        "body": [ "vim.api.nvim_buf_get_name(0)" ]
    },

    "vim cmd": {
        "prefix": "vim.cmd",
        "body": [ "vim.cmd(\"\")" ]
    },

    "get nvim mode": {
        "prefix": "get_nvim_mode",
        "body": [ "vim.fn.mode()" ]
    },

    "get nvim cursor position": {
        "prefix": "get_nvim_cursor_position",
        "body": [ "vim.api.nvim_win_get_cursor(0)" ]
    },

    "set nvim cursor position": {
        "prefix": "set_nvim_cursor_position",
        "body": [ "vim.api.nvim_win_set_cursor(0, cpos)" ]
    },

    "get nvim word under cursor": {
        "prefix": "get nvim word under cursor",
        "body": [
            "vim.fn.getregion(vim.fn.getpos('.'), vim.fn.getpos('.'))[1]"
        ]
    },

    "get nvim working directory": {
        "prefix": "get_nvim_working_directory",
        "body": [ "vim.fn.getcwd()" ]
    },

    "vim ui input": {
        "prefix": "vim_ui_input",
        "body": [
            "vim.ui.input({",
            "    prompt=\"${1:Input}:\" default=\"${2:default}\" completion=\"file\",",
            "},",
            "function(input)",
            "    vim.api.nvim_command(\"redraw\") -- Hide prompt",
            "    if input == nil then",
            "        vim.notify(\"Canceled\", vim.log.levels.INFO) return",
            "    end",
            "    if input == \"\" then",
            "        print(\"input empty!\") return",
            "    end",
            "",
            "    ${0}",
            "end)"
        ]
    }

}

